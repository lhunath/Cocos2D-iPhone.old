Index: b2World.cpp
===================================================================
--- b2World.cpp	(revision 1258)
+++ b2World.cpp	(working copy)
@@ -898,7 +898,8 @@
 	}
 
 	// Draw debug information.
-	DrawDebugData();
+	// cocos2d: DrawDebugData should be called from "draw", not "step"
+//	DrawDebugData();
 
 	if (step.dt > 0.0f)
 	{
Index: b2World.h
===================================================================
--- b2World.h	(revision 1258)
+++ b2World.h	(working copy)
@@ -127,24 +127,24 @@
 
 	/// Query the world for all fixtures that intersect a given segment. You provide a fixture
 	/// pointer buffer of specified size. The number of fixtures found is returned, and the buffer
-	/// is filled in order of intersection
-	/// @param segment defines the begin and end point of the ray cast, from p1 to p2.
-	/// Use b2Segment.Extend to create (semi-)infinite rays
+	/// is filled in order of intersection
+	/// @param segment defines the begin and end point of the ray cast, from p1 to p2.
+	/// Use b2Segment.Extend to create (semi-)infinite rays
 	/// @param fixtures a user allocated fixture pointer array of size maxCount (or greater).
-	/// @param maxCount the capacity of the shapes array
-	/// @param solidShapes determines if shapes that the ray starts in are counted as hits.
-	/// @param userData passed through the worlds contact filter, with method RayCollide. This can be used to filter valid shapes
+	/// @param maxCount the capacity of the shapes array
+	/// @param solidShapes determines if shapes that the ray starts in are counted as hits.
+	/// @param userData passed through the worlds contact filter, with method RayCollide. This can be used to filter valid shapes
 	/// @returns the number of shapes found
 	int32 Raycast(const b2Segment& segment, b2Fixture** fixtures, int32 maxCount, bool solidShapes, void* userData);
 
 	/// Performs a ray-cast as with Raycast, finding the first intersecting fixture.
-	/// @param segment defines the begin and end point of the ray cast, from p1 to p2.
-	/// Use b2Segment.Extend to create (semi-)infinite rays	
-	/// @param lambda returns the hit fraction. You can use this to compute the contact point
-	/// p = (1 - lambda) * segment.p1 + lambda * segment.p2.
-	/// @param normal returns the normal at the contact point. If there is no intersection, the normal
-	/// is not set.
-	/// @param solidShapes determines if shapes that the ray starts in are counted as hits.
+	/// @param segment defines the begin and end point of the ray cast, from p1 to p2.
+	/// Use b2Segment.Extend to create (semi-)infinite rays	
+	/// @param lambda returns the hit fraction. You can use this to compute the contact point
+	/// p = (1 - lambda) * segment.p1 + lambda * segment.p2.
+	/// @param normal returns the normal at the contact point. If there is no intersection, the normal
+	/// is not set.
+	/// @param solidShapes determines if shapes that the ray starts in are counted as hits.
 	/// @returns the colliding shape shape, or null if not found
 	b2Fixture* RaycastOne(const b2Segment& segment, float32* lambda, b2Vec2* normal, bool solidShapes, void* userData);
 
@@ -208,6 +208,9 @@
 	/// Get the global gravity vector.
 	b2Vec2 GetGravity() const;
 
+	/// cocos2d: moved from private to public
+	void DrawDebugData();
+
 private:
 
 	friend class b2Body;
@@ -219,7 +222,6 @@
 
 	void DrawJoint(b2Joint* joint);
 	void DrawShape(b2Fixture* shape, const b2XForm& xf, const b2Color& color);
-	void DrawDebugData();
 
 	//Is it safe to pass private static function pointers?
 	static float32 RaycastSortKey(void* shape);
